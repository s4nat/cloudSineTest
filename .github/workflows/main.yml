name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_FRONTEND: virusscanner-frontend
  ECR_REPOSITORY_BACKEND: virusscanner-backend
  EC2_HOST: ${{ secrets.EC2_HOST }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
  
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Build Tests (Backend)
      working-directory: ./backend
      env:
        JWT_SECRET: your_very_secure_jwt_secret_key
        VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?ssl=disabled
      run: go test -v ./tests/build_test.go

    - name: Run Database Tests (Backend)
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
      run: go test -v ./tests/db_test.go

    - name: Run VirusTotal Integration Tests (Backend)
      working-directory: ./backend
      env:
        VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
      run: go test -v ./tests/virustotal_test.go
      
      


  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build and push Nginx (reverse proxy + frontend) image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create production env file with secrets
        cd frontend
        echo "REACT_APP_API_URL=https://ec2-54-255-196-98.ap-southeast-1.compute.amazonaws.com/api" > .env.production
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> .env.production
        cd ..
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
          -f nginx/Dockerfile.prod .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Build and push Backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
          -f backend/Dockerfile.prod ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_COMPOSE_OVERRIDE: docker-compose.prod.yml

      run: |
        scp docker-compose.yml $DOCKER_COMPOSE_OVERRIDE ec2-user@${{ env.EC2_HOST }}:~/virusscanner/
        scp ./nginx/nginx.prod.conf ec2-user@${{ env.EC2_HOST }}:~/virusscanner/nginx/
        
        ssh ec2-user@${{ env.EC2_HOST }} "cd ~/virusscanner && \
          echo AWS_REGION=${{ env.AWS_REGION }} >> .env && \
          echo ECR_REGISTRY=$ECR_REGISTRY >> .env && \
          echo IMAGE_TAG=$IMAGE_TAG >> .env && \
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY && \
          sudo systemctl stop nginx || true && \
          docker-compose -f docker-compose.yml -f $DOCKER_COMPOSE_OVERRIDE down || true && \
          docker-compose -f docker-compose.yml -f $DOCKER_COMPOSE_OVERRIDE pull && \
          docker-compose -f docker-compose.yml -f $DOCKER_COMPOSE_OVERRIDE up -d"

    - name: Cleanup
      run: rm -f ~/.ssh/id_rsa